Structured Query Language
=========================

SQL, or Structured Query Language, is a language designed to allow users query, manipulate, 
and transform data from a relational database.
Por convencion se pone en mayúsculas todas las palabras propias del lenguaje SQL cómo CREATE, 
SELECT, ALTER, etc y el resto de palabras como los nombres de las tablas, columnas, nombres 
de usuarios, etc en minúscula.

SQL tiene dos grandes sublenguajes:
DDL o Data Definition Language que nos ayuda a crear la estructura de una
 base de datos. Existen 3 grandes comandos: CREATE, ALTER Y DROP

CREATE
======
Nos ayuda a crear bases de datos, tablas, vistas, índices, etc. EJEMPLO:
    CREATE SHEMA 'platziblog' DEFAULT CHARACTER SET utf8;
    CREATE TABLE people (
        'person_id' INT NOT NULL AUTO_INCREMENT,
        'last_name' varchar(255) NULL,
        PRIMARY KEY('person_id')
    );
    
ALTER
=====
Ayuda a alterar o modificar entidades.

DROP
====
Nos ayuda a borrar. Hay que tener cuidado al utilizarlo.


3 objetos que manipularemos con el lenguaje DDL:
Database o bases de datos
Table o tablas. Son la traducción a SQL de las entidades
View o vistas: Se ofrece la proyección de los datos de la base de datos de forma entendible.







------------------------------------------------

-----------------------
READ DATA FROM DATABASE
-----------------------

    SELECT
    ======
    To retrieve data from a SQL database, we need to write SELECT statements
        
        Basic structure:
            SELECT column, another_column, …
            FROM mytable;

        Retrieve all columns: use the * operator:
            SELECT * 
            FROM mytable;


    CONDITIONALS
    ============

        Numbers
        -------
            Operator	            Condition	                                            SQL Example
            ---------------------------------------------------------------------------------------------------------------
            =, !=, < <=, >, >=	    Standard numerical operators	                        col_name != 4
            BETWEEN … AND …	        Number is within range of two values (inclusive)	    col_name BETWEEN 1.5 AND 10.5
            NOT BETWEEN … AND …	    Number is not within range of two values (inclusive)	col_name NOT BETWEEN 1 AND 10
            IN (…)	                Number exists in a list	                                col_name IN (2, 4, 6)
            NOT IN (…)	            Number does not exist in a list	                        col_name NOT IN (1, 3, 5)

        Text
        ----
            Operator	Condition	                                        Example
            ------------------------------------------------------------------------------------------------
            =	        Case sensitive exact string comparison 	            col_name = "abc"
                        (notice the single equals)

            != or <>	Case sensitive exact string inequality comparison	col_name != "abcd"

            LIKE	    Case insensitive exact string comparison	        col_name LIKE "ABC"

            NOT LIKE	Case insensitive exact string inequality 	        col_name NOT LIKE "ABCD"
                        comparison

            %	        Used anywhere in a string to match a sequence 	    col_name LIKE "%AT%"
                        of zero or more characters.                         (matches "AT", "ATTIC", 
                        (only with LIKE or NOT LIKE)                        "CAT" or even "BATS")

            _	        Used anywhere in a string to match a single         col_name LIKE "AN_"
                        character (only with LIKE or NOT LIKE)	            (matches "AND", but not "AN")

            IN (…)	    String exists in a list	                            col_name IN ("A", "B", "C")

            NOT IN (…)	String does not exist in a list	                    col_name NOT IN ("D", "E", "F")

        
        NULL
        ----
            column IS/IS NOT NULL


    WHERE
    =====
    In order to filter certain results from being returned, we need to use a WHERE clause in the query

        Basic structure:
            SELECT column, another_column, …
            FROM mytable
            WHERE condition
                AND/OR another_condition
                AND/OR …;


    DISTINCT
    ========
    Discard rows that have a duplicate column value.

        Basic structure:
            SELECT DISTINCT column, another_column, …
            FROM mytable
            WHERE condition(s);


    ORDER BY
    ========
    Sort your results by a given column in ascending or descending order

        Basic structure:
            SELECT column, another_column, …
            FROM mytable
            WHERE condition(s)
            ORDER BY column ASC/DESC;


    LIMIT and OFFSET
    ================
    The LIMIT will reduce the number of rows to return, and the optional 
    OFFSET will specify where to begin counting the number rows from.
    If you think about websites like Reddit or Pinterest, the front page 
    is a list of links sorted by popularity and time, and each subsequent 
    page can be represented by sets of links at different offsets in the database.

        Basic structure:
            SELECT column, another_column, …
            FROM mytable
            WHERE condition(s)
            ORDER BY column ASC/DESC
            LIMIT num_limit OFFSET num_offset;


    JOIN
    ====

        INNER JOIN
        ----------
        INNER JOIN is written simply as a JOIN
        The INNER JOIN is a process that matches rows from the first table and the second table 
        which have the same key (as defined by the ON constraint) to create a result row with the 
        combined columns from both tables. After the tables are joined, the other clauses we 
        learned previously are then applied.

            SELECT column, another_table_column, …
            FROM mytable
            INNER JOIN another_table 
                ON mytable.id = another_table.id
            WHERE condition(s)
            ORDER BY column, … ASC/DESC
            LIMIT num_limit OFFSET num_offset;

        
        LEFT/RIGHT/FULL JOIN
        --------------------
        If the two tables have asymmetric data then we would have to use a LEFT JOIN, RIGHT JOIN 
        or FULL JOIN instead to ensure that the data you need is not left out of the results.

            SELECT column, another_column, …
            FROM mytable
            LEFT/RIGHT/FULL JOIN another_table 
                ON mytable.id = another_table.matching_id
            WHERE condition(s)
            ORDER BY column, … ASC/DESC
            LIMIT num_limit OFFSET num_offset;

        When using any of these new joins, you will likely have to write additional logic to deal with NULL


    Queries with expressions
    ========================

        SELECT particle_speed / 2.0 AS half_particle_speed
        FROM physics_data
        WHERE ABS(particle_position) * 10.0 > 500;


    Queries with aggregates
    =======================
    SQL also supports the use of aggregate expressions (or functions) 
    that allow you to summarize information about a group of rows of data.

        SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
        FROM mytable
        WHERE constraint_expression;


        Common aggregate functions:

        Function	        Description
        ------------------------------------------------------------------------------------------------------------
        COUNT(*),	        A common function used to counts the number of rows in the group if no 
        COUNT(column)       column name is specified. Otherwise, count the number of rows in the group 
                            with non-NULL values in the specified column.

        MIN(column)	        Finds the smallest numerical value in the specified column for all rows in the group.

        MAX(column)	        Finds the largest numerical value in the specified column for all rows in the group.

        AVG(column)	        Finds the average numerical value in the specified column for all rows in the group.

        SUM(column)	        Finds the sum of all numerical values in the specified column for the rows in the group.




        GROUP BY
        --------
        The GROUP BY clause works by grouping rows that have the same value in the column specified.

            SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
            FROM mytable
            WHERE constraint_expression
            GROUP BY column;

        HAVING
        ------
        The HAVING clause constraints are written the same way as the WHERE clause constraints, 
        and are applied to the grouped rows.

            SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
            FROM mytable
            WHERE condition
            GROUP BY column
            HAVING group_condition;


    Complete select query
    =====================

        SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
        FROM mytable
            JOIN another_table
            ON mytable.column = another_table.column
            WHERE constraint_expression
            GROUP BY column
            HAVING constraint_expression
            ORDER BY column ASC/DESC
            LIMIT count OFFSET COUNT;

        Query order of execution
        ------------------------
            1. FROM and JOINs
            The FROM clause, and subsequent JOINs are first executed to determine the total working 
            set of data that is being queried. This includes subqueries in this clause, and can cause 
            temporary tables to be created under the hood containing all the columns and rows of the 
            tables being joined.

            2. WHERE
            Once we have the total working set of data, the first-pass WHERE constraints are applied 
            to the individual rows, and rows that do not satisfy the constraint are discarded. Each 
            of the constraints can only access columns directly from the tables requested in the FROM 
            clause. Aliases in the SELECT part of the query are not accessible in most databases since 
            they may include expressions dependent on parts of the query that have not yet executed.

            3. GROUP BY
            The remaining rows after the WHERE constraints are applied are then grouped based on common 
            values in the column specified in the GROUP BY clause. As a result of the grouping, there will 
            only be as many rows as there are unique values in that column. Implicitly, this means that 
            you should only need to use this when you have aggregate functions in your query.

            4. HAVING
            If the query has a GROUP BY clause, then the constraints in the HAVING clause are then applied 
            to the grouped rows, discard the grouped rows that don't satisfy the constraint. Like the WHERE 
            clause, aliases are also not accessible from this step in most databases.

            5. SELECT
            Any expressions in the SELECT part of the query are finally computed.

            6. DISTINCT
            Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be 
            discarded.

            7. ORDER BY
            If an order is specified by the ORDER BY clause, the rows are then sorted by the specified data 
            in either ascending or descending order. Since all the expressions in the SELECT part of the 
            query have been computed, you can reference aliases in this clause.

            8. LIMIT / OFFSET
            Finally, the rows that fall outside the range specified by the LIMIT and OFFSET are discarded, 
            leaving the final set of rows to be returned from the query.







-----------------------
MODIFY DATA in DATABASE
-----------------------

    INSERT
    ======
    In general, each row of data you insert should contain values for every corresponding 
    column in the table. You can insert multiple rows at a time by just listing them 
    sequentially.

        INSERT INTO mytable
            VALUES (value_or_expr, another_value_or_expr, …),
                (value_or_expr_2, another_value_or_expr_2, …),
                …;

    if you have incomplete data and the table contains columns that support default values, 
    you can insert rows with only the columns of data you have by specifying them explicitly.

        INSERT INTO mytable
        (column, another_column, …)
        VALUES (value_or_expr, another_value_or_expr, …),
            (value_or_expr_2, another_value_or_expr_2, …),
            …;



    UPDATE
    ======
    The statement works by taking multiple column/value pairs, and applying those 
    changes to each and every row that satisfies the constraint in the WHERE clause.

        UPDATE mytable
        SET column = value_or_expr, 
            other_column = another_value_or_expr, 
            …
        WHERE condition;



    DELETE
    ======
    delete data from a table

        DELETE FROM mytable
        WHERE condition;



    CREATE TABLE
    ============
        CREATE TABLE IF NOT EXISTS mytable (
            column DataType TableConstraint DEFAULT default_value,
            another_column DataType TableConstraint DEFAULT default_value,
            …
        );

        Table data types

            Data type	            Description
            ---------------------------------------------------------------------------------------------------
            INTEGER, BOOLEAN	    The integer datatypes can store whole integer values like the count 
                                    of a number or an age. In some implementations, the boolean value is 
                                    just represented as an integer value of just 0 or 1.

            FLOAT, DOUBLE, REAL	    The floating point datatypes can store more precise numerical data 
                                    like measurements or fractional values. Different types can be used 
                                    depending on the floating point precision required for that value.

            CHARACTER(num_chars),   The text based datatypes can store strings and text in all sorts of 
            VARCHAR(num_chars),     locales. The distinction between the various types generally amount 
            TEXT	                to underlaying efficiency of the database when working with these columns.
                                    Both the CHARACTER and VARCHAR (variable character) types are specified 
                                    with the max number of characters that they can store (longer values may 
                                    be truncated), so can be more efficient to store and query with big tables.

            DATE, DATETIME	        SQL can also store date and time stamps to keep track of time series and 
                                    event data. They can be tricky to work with especially when manipulating 
                                    data across timezones.

            BLOB	                Finally, SQL can store binary data in blobs right in the database. 
                                    These values are often opaque to the database, so you usually have to 
                                    store them with the right metadata to requery them.


        Common Table constraints

            Constraint	            Description
            ----------------------------------------------------------------------------------------------------
            PRIMARY KEY	            This means that the values in this column are unique, and each value can be 
                                    used to identify a single row in this table.

            AUTOINCREMENT	        For integer values, this means that the value is automatically filled in and 
                                    incremented with each row insertion. Not supported in all databases.

            UNIQUE	                This means that the values in this column have to be unique, so you can't 
                                    insert another row with the same value in this column as another row in the 
                                    table. Differs from the `PRIMARY KEY` in that it doesn't have to be a key 
                                    for a row in the table.

            NOT NULL	            This means that the inserted value can not be `NULL`.

            CHECK (expression)	    This allows you to run a more complex expression to test whether the values 
                                    inserted are valid. For example, you can check that values are positive, or 
                                    greater than a specific size, or start with a certain prefix, etc.

            FOREIGN KEY	            This is a consistency check which ensures that each value in this column 
                                    corresponds to another value in a column in another table.
                                    For example, if there are two tables, one listing all Employees by ID, 
                                    and another listing their payroll information, the `FOREIGN KEY` can ensure 
                                    that every row in the payroll table corresponds to a valid employee in the 
                                    master Employee list.



    ALTER TABLE
    ===========
    SQL provides a way for you to update your corresponding tables and database schemas

        Adding columns
        --------------
        specify the data type of the column along with any potential table constraints and default values

            ALTER TABLE mytable
            ADD column DataType OptionalTableConstraint
                DEFAULT default_value;

        Removing columns
        ----------------
        Dropping columns is as easy as specifying the column to drop, however, some databases 
        (including SQLite) don't support this feature. Instead you may have to create a new 
        table and migrate the data over.

            ALTER TABLE mytable
            DROP column_to_be_deleted;

        Renaming the table
        ------------------
            ALTER TABLE mytable
            RENAME TO new_table_name;


        Adding foreign key
        ALTER TABLE Orders
            ADD CONSTRAINT FK_PersonOrder
            FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);



    DROP TABLE
    ==========
    Remove an entire table including all of its data and metadata
        DROP TABLE IF EXISTS mytable;



Contar el numero de veces que campaign name aparece
select campaign_name, count(*) as c 
FROM streaming_bookings 
GROUP BY campaign_name
order by c desc